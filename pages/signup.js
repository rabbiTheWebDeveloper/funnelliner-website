import style from "/styles/Register.module.css";
import Link from "next/link";
import * as yup from "yup";
import { useForm } from "react-hook-form";
import { yupResolver } from "@hookform/resolvers/yup";
import axios from "axios";
import { useRouter } from "next/router";
import { useEffect, useState } from "react";
import Otp from "../Components/Otp/Otp";
import Head from "next/head";
import { useToast } from "../hooks/useToast";
import Image from "next/image";

export default function UserSignup() {
  const showToast = useToast()
  const router = useRouter();
  const phoneRegex = /^(?:\+88|88)?(01[3-9]\d{8})$/;
  const [loading, setLoading] = useState(false);
  const [phone, setPhone] = useState(null);
  const [verifyLoading, setVerifyLoading] = useState(false);
  useEffect(() => {
    const { unverified_user } = router.query;
    if (unverified_user) {
      
      setVerifyLoading(true)
      setPhone(unverified_user)
    }
  }, [router])

  const validationSchema = yup.object().shape({
    name: yup.string().required("Full name field is required"),
    email: yup.string().required("Email field is required").email(),
    phone: yup
      .string()
      .required("Phone field is required")
      .matches(phoneRegex, "Phone number is not valid"),
    shop_name: yup.string().required("Shop name field is required"),
    password: yup.string().required("Password field is required"),
    password_confirmation: yup
      .string()
      .required("Confirm Password field is required")
      .oneOf([yup.ref("password"), null], "Passwords must match"),
  });

  const {
    register,
    handleSubmit,
    watch,
    setError,
    formState: { errors },
  } = useForm({
    mode: "onChange",
    resolver: yupResolver(validationSchema),
  });

  const submitForm = (data) => {
    setLoading(true);

    axios
      .post(process.env.API_URL + "/signup", data)
      .then((response) => {
        if (response.data.success === true) {
          setVerifyLoading(true);
          setPhone(response?.data?.data?.phone);
          showToast(response.data.message)
        }
      })
      .catch((errors) => {
        Object.keys(errors.response.data.errors).forEach((field) => {
          const messages = errors.response.data.errors[field];

          setError(field, {
            type: "server",
            message: messages.join(". "),
          });
        });
        setLoading(false);
      });
  };

  return (
    <>
      <Head>
        <title>Funnel Liner | Register</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, user-scalable=no" />
        <link rel="icon" href="../images/favicon.png" />
      </Head>
      <div></div>
      <div>
        {!verifyLoading ? (
          <section className={style.Register}>
            <div className={style.RegisterForm}>
              <div className={style.Overflow}>
                {/* <div className={style.HeaderPart}>
                  <div className="Logo">
                    <img
                      src="/images/logo_1.svg"
                      alt=""
                      className={style.RegisterFormLogo}
                    />
                  </div>

                  <div className="text">
        
                    <p>
                      The Best Business 360 Solution For Your Business, <br /> Just
                      Login & Youâ€™re Ready To Go !
                    </p>
                  </div>
                </div> */}

                {/* <form onSubmit={handleSubmit(submitForm)}>
                  <div className={style.form_part}>
                    <div className={style.CustomerInput}>
                      <label
                        className={`${errors.name ? `${style.ValidationErrorLabel}` : ""
                          }`}
                      >
                        Full Name <span>*</span>
                      </label>
                      <input
                        type="text"
                        name="name"
                        className={`${errors.name
                            ? `${style.CustomerInputField} ${style.ValidationError}`
                            : `${style.CustomerInputField}`
                          }`}
                        placeholder="Enter Your Full Name "
                        {...register("name")}
                      />
                      {errors && (
                        <span className={style.ValidationErrorLabel}>
                          {errors.name?.message}
                        </span>
                      )}
                    </div>

                    <div className={style.CustomerInput}>
                      <label
                        className={`${errors.shop_name
                            ? `${style.ValidationErrorLabel}`
                            : ""
                          }`}
                      >
                        Shop Name <span>*</span>
                      </label>
                      <input
                        type="text"
                        name="name"
                        className={`${errors.shop_name
                            ? `${style.CustomerInputField} ${style.ValidationError}`
                            : `${style.CustomerInputField}`
                          }`}
                        placeholder="Enter Your Shop Name "
                        {...register("shop_name")}
                      />

                      {errors && (
                        <span className={style.ValidationErrorLabel}>
                          {errors.shop_name?.message}
                        </span>
                      )}
                    </div>

                    <div className={style.CustomerInput}>
                      <label
                        className={`${errors.email ? `${style.ValidationErrorLabel}` : ""
                          }`}
                      >
                        E-mail Address <span>*</span>
                      </label>
                      <input
                        type="text"
                        className={`${errors.email
                            ? `${style.CustomerInputField} ${style.ValidationError}`
                            : `${style.CustomerInputField}`
                          }`}
                        placeholder="Enter Your Email Address "
                        {...register("email")}
                      />

                      {errors && (
                        <span className={style.ValidationErrorLabel}>
                          {errors.email?.message}
                        </span>
                      )}
                    </div>

                    <div className={style.CustomerInput}>
                      <label
                        className={`${errors.phone ? `${style.ValidationErrorLabel}` : ""
                          }`}
                      >
                        Phone Number <span>*</span>
                      </label>
                      <input
                        type="text"
                        className={`${errors.phone
                            ? `${style.CustomerInputField} ${style.ValidationError}`
                            : `${style.CustomerInputField}`
                          }`}
                        placeholder="Enter Your Phone Number "
                        {...register("phone")}
                      />

                      {errors && (
                        <span className={style.ValidationErrorLabel}>
                          {errors.phone?.message}
                        </span>
                      )}
                    </div>

                    <div className={style.CustomerInput}>
                      <label
                        className={`${errors.password ? `${style.ValidationErrorLabel}` : ""
                          }`}
                      >
                        Password <span>*</span>
                      </label>
                      <input
                        type="password"
                        name="name"
                        className={`${errors.password
                            ? `${style.CustomerInputField} ${style.ValidationError}`
                            : `${style.CustomerInputField}`
                          }`}
                        placeholder="Enter Your Password "
                        {...register("password")}
                      />

                      {errors && (
                        <span className={style.ValidationErrorLabel}>
                          {errors.password?.message}
                        </span>
                      )}
                    </div>

                    <div className={style.CustomerInput}>
                      <label
                        className={`${errors.password_confirmation
                            ? `${style.ValidationErrorLabel}`
                            : ""
                          }`}
                      >
                        Confirm Password <span>*</span>
                      </label>
                      <input
                        type="password"
                        name="name"
                        className={`${errors.password_confirmation
                            ? `${style.CustomerInputField} ${style.ValidationError}`
                            : `${style.CustomerInputField}`
                          }`}
                        placeholder="Confirm Your Password"
                        {...register("password_confirmation")}
                      />

                      {errors && (
                        <span className={style.ValidationErrorLabel}>
                          {errors.password_confirmation?.message}
                        </span>
                      )}
                    </div>
                  </div>

                  <div className={style.Button}>
                    <button
                      type="submit"
                      className={style.CustomerInputButton}
                      disabled={loading}
                    >
                      {!loading ? "Register" : "Creating Account ..."}
                    </button>

                    <p className={style.CustomerInputPara}>
                      Already have an account ?
                      <Link
                        className={style.CustomerInputLink}
                        href={"https://dashboard.funnelliner.com/"}
                      >
                        Login
                      </Link>
                    </p>
                  </div>
                </form> */}

                {/* <Image src="/Vector Smart Object.png" alt="" width={500}
                  height={500} /> */}
                
                <div>
                  <img
                    src="/Vector-Object.png"
                    alt="asdsa"
                    style={{
                      width: '100%', // Set the width to 100% of its container
                      height: 'auto', // Automatically adjust the height to maintain aspect ratio
                    }}
                  />
                </div>

                {/* <div
                  style={{
                    position: 'fixed',
                    top: 0,
                    left: 0,
                    width: '100%',
                    height: '100%',
                    zIndex: 9999,
                  }}
                >
                  <Image
                    src="/Vector Smart Object.png"
                    alt=""
                    layout="fill"
                    objectFit="contain"
                    loading="eager"
                  />
                </div> */}

              </div>
            </div>
          </section>
        ) : (
          <Otp phone={phone} />
        )}
      </div>
    </>
  );
}
